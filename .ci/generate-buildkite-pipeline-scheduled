#!/usr/bin/env bash
#===----------------------------------------------------------------------===##
#
# Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
# See https://llvm.org/LICENSE.txt for license information.
# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
#
#===----------------------------------------------------------------------===##

#
# This file generates a Buildkite pipeline that triggers the various CI jobs for
# the LLVM project on scheduled builds.
#
# See https://buildkite.com/docs/agent/v3/cli-pipeline#pipeline-format.
#

cat <<EOF
steps:
- agents:
    queue: "linux-test"
  commands:
  - sccache --zero-stats
  - rm -rf ./build && mkdir -p ./build && cd ./build
  - echo "--- configure"
  - cmake ../llvm \
    -D CMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++ \
    -D LLVM_ENABLE_PROJECTS="mlir;clang;llvm" \
    -G Ninja -D CMAKE_BUILD_TYPE=Release \
    -D LLVM_ENABLE_LLD=ON -D CMAKE_CXX_FLAGS=-gmlt -DBOLT_CLANG_EXE=/usr/bin/clang
    -D LLDB_INCLUDE_TESTS=OFF \
    -D CMAKE_C_COMPILER_LAUNCHER=sccache -D CMAKE_CXX_COMPILER_LAUNCHER=sccache
    -D LLVM_ENABLE_ASSERTIONS=ON -D LLVM_BUILD_EXAMPLES=ON \
    -D COMPILER_RT_BUILD_LIBFUZZER=OFF \
    -D LLVM_LIT_ARGS="-v --xunit-xml-output test-results.xml"
  - echo "--- test"
  - ninja -v check-all
  - echo "--- sccache stats"
  - sccache --show-stats
  env:
    CC: "clang"
    CXX: "clang++"
    LD: "LLD"
  key: linux
  label: ':linux: linux x86'
  retry:
    automatic:
    - exit_status: -1
      limit: 2
    - exit_status: 255
      limit: 2
  timeout_in_minutes: 120
- agents:
    queue: windows
  artifact_paths:
  - artifacts/**/*
  - '*_result.json'
  - build/test-results.xml
  commands:
  - sccache --zero-stats
  - C:\BuildTools\Common7\Tools\VsDevCmd.bat -arch=amd64 -host_arch=amd64
  - rd /s /q .\build && mkdir .\build && cd .\build
  - cmake ../llvm \
    -G Ninja \
    -D CMAKE_BUILD_TYPE=Release \
    -D LLVM_ENABLE_PROJECTS="mlir;clang;llvm" \
    -D CMAKE_C_COMPILER=cl -DCMAKE_CXX_COMPILER=cl -D LLVM_ENABLE_LLD=ON \
    -D CMAKE_C_COMPILER_LAUNCHER=sccache -D CMAKE_CXX_COMPILER_LAUNCHER=sccache \
    -D LLVM_ENABLE_ASSERTIONS=ON -D LLVM_BUILD_EXAMPLES=ON \
    -D LLDB_INCLUDE_TESTS=OFF \
    -D COMPILER_RT_BUILD_LIBFUZZER=OFF -D COMPILER_RT_BUILD_ORC=OFF \
    -D LLVM_LIT_ARGS="-v --xunit-xml-output test-results.xml"
  - ninja all
  key: windows
  label: ':windows: windows x64'
  retry:
    automatic:
    - exit_status: -1
      limit: 2
    - exit_status: 255
      limit: 2
  timeout_in_minutes: 150
- agents:
    queue: llvm-bazel-premerge
  commands:
  - set -eu
  - cd utils/bazel
  - bazel query //... + @llvm-project//... | xargs bazel test --config=ci
  key: bazel
  label: ':bazel: bazel'
  retry:
    automatic:
    - exit_status: -1
      limit: 2
    - exit_status: 255
      limit: 2
  timeout_in_minutes: 120
  # - trigger: "libcxx-ci"
  #   build:
  #     message: "${BUILDKITE_MESSAGE}"
  #     commit: "${BUILDKITE_COMMIT}"
  #     branch: "${BUILDKITE_BRANCH}"
  # - trigger: "clang-ci"
  #   build:
  #     message: "${BUILDKITE_MESSAGE}"
  #     commit: "${BUILDKITE_COMMIT}"
  #     branch: "${BUILDKITE_BRANCH}"
EOF
